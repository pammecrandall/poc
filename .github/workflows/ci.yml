name: Continuous Integration

on:
  push:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
  pull_request:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'
    types:
      - opened
      - reopened
      - synchronize

defaults:
  run:
    shell: bash

env:
  GIT_NAME: Pamme Crandall
  GIT_MAIL: p.candall@f5.com

concurrency:
  group: ${{ github.ref_name }}-ci
  cancel-in-progress: true

jobs:
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-20.04
    if: ${{ !startsWith(github.ref, 'refs/heads/release') }}
    strategy:
        fail-fast: false
        matrix:
          image: [alpine]
          platforms: ["linux/amd64"]
          include:
          - image: ubi
            platforms: "linux/amd64"
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
        if: github.event_name != 'pull_request'
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            name=nginx/poc-test
            name=ghcr.io/nginxinc/poc-test
          flavor: suffix=${{ contains(matrix.image, 'ubi') && '-ubi' || '' }}${{ contains(matrix.image, 'alpine') && '-alpine' || '' }},onlatest=true
          tags: |
            type=edge
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Output Variables
        id: var
        run: |
          version=${{ steps.meta.outputs.version }}
          if ${{ startsWith(github.ref, 'refs/tags/') }}; then
              ic_version=v$version
          else
              tag=$(git describe --tags --abbrev=0)
              sha_short=$(echo ${{ github.sha }} | cut -c1-7)
              ic_version=$tag-$version-$sha_short
          fi
          echo "::set-output name=ic_version::$ic_version"
      - name: Build Docker image (and push if not a PR)
        uses: docker/build-push-action@v3
        with:
          file: build/Dockerfile
          context: '.'
          cache-from: type=gha,scope=${{ matrix.image }}
          cache-to: type=gha,scope=${{ matrix.image }},mode=max
          target: goreleaser
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: ${{ github.event_name != 'pull_request' && matrix.platforms || '' }}
          load: ${{ github.event_name == 'pull_request' }}
          push: ${{ github.event_name != 'pull_request' }}
          pull: true
          no-cache: ${{ github.event_name != 'pull_request' }}
          build-args: |
            BUILD_OS=${{ matrix.image }}
            IC_VERSION=${{ steps.var.outputs.ic_version }}
